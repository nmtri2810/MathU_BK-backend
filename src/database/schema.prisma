// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int     @id @unique @default(autoincrement())
  email         String  @unique
  password      String
  username      String  @unique
  avatar_url    String?
  reputation    Int     @default(0)
  refresh_token String?

  role    Roles @relation(fields: [role_id], references: [id])
  role_id Int   @default(3)

  questions Questions[]
  votes     Votes[]
  answers   Answers[]

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime? @db.Timestamp()
}

model Roles {
  id   Int    @id @unique @default(autoincrement())
  name String @unique

  users Users[]

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime? @db.Timestamp()
}

model Questions {
  id          Int    @id @unique @default(autoincrement())
  title       String @unique
  description String

  user    Users @relation(fields: [user_id], references: [id])
  user_id Int

  answers Answers[]
  tags    QuestionsTags[]
  votes   Votes[]         @relation("question_vote")

  created_at DateTime  @default(now()) //question_date
  updated_at DateTime? @updatedAt
  deleted_at DateTime? @db.Timestamp()
}

model Answers {
  id          Int     @id @unique @default(autoincrement())
  content     String
  is_accepted Boolean @default(false)

  question    Questions @relation(fields: [question_id], references: [id])
  question_id Int
  user        Users     @relation(fields: [user_id], references: [id])
  user_id     Int

  votes Votes[] @relation("answer_vote")

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime? @db.Timestamp()
}

model Tags {
  id          Int    @id @unique @default(autoincrement())
  name        String @unique
  description String

  questions QuestionsTags[]

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime? @db.Timestamp()
}

model QuestionsTags {
  question    Questions @relation(fields: [question_id], references: [id])
  question_id Int
  tag         Tags      @relation(fields: [tag_id], references: [id])
  tag_id      Int

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime? @db.Timestamp()

  @@id([question_id, tag_id])
}

model Votes {
  id         Int     @id @unique @default(autoincrement())
  is_upvoted Boolean

  user          Users         @relation(fields: [user_id], references: [id])
  user_id       Int
  question      Questions?    @relation("question_vote", fields: [voteable_id], references: [id], map: "question_voteable_id")
  answer        Answers?      @relation("answer_vote", fields: [voteable_id], references: [id], map: "answer_voteable_id")
  voteable_id   Int
  voteable_type VoteableTypes

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime? @db.Timestamp()

  @@unique([user_id, voteable_id, voteable_type])
}

// FUCKING STUPID PRISMA NO ENUM SETUP VALUE
enum VoteableTypes {
  QUESTION
  ANSWER
}
