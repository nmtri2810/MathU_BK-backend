// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int     @id @unique @default(autoincrement())
  email         String  @unique
  password      String
  username      String?
  refresh_token String?
  posts         Posts[]
  votes         Votes[]
  role          Roles   @relation(fields: [role_id], references: [id])
  role_id       Int     @default(3)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model Roles {
  id    Int     @id @unique @default(autoincrement())
  name  String  @unique
  users Users[]

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model Posts {
  id          Int            @id @unique @default(autoincrement())
  title       String         @unique
  description String
  comments    PostComments[]
  tags        PostsTags[]
  votes       Votes[]
  user        Users          @relation(fields: [user_id], references: [id])
  user_id     Int

  created_at DateTime  @default(now()) //post_date
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model PostComments {
  id      Int     @id @unique @default(autoincrement())
  content String
  votes   Votes[]
  post    Posts   @relation(fields: [post_id], references: [id])
  post_id Int

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model Tags {
  id          Int         @id @unique @default(autoincrement())
  name        String      @unique
  description String
  posts       PostsTags[]

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model PostsTags {
  post    Posts @relation(fields: [post_id], references: [id])
  post_id Int
  tag     Tags  @relation(fields: [tag_id], references: [id])
  tag_id  Int

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  @@id([post_id, tag_id])
}

model Votes {
  id              Int           @id @unique @default(autoincrement())
  is_upvoted      Boolean
  user            Users         @relation(fields: [user_id], references: [id])
  user_id         Int
  post            Posts?        @relation(fields: [post_id], references: [id])
  post_id         Int?
  post_comment    PostComments? @relation(fields: [post_comment_id], references: [id])
  post_comment_id Int?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  @@unique([user_id, post_id])
  @@unique([user_id, post_comment_id])
}
